package com.jhm69.money_tracker.ui.income;import android.annotation.SuppressLint;import android.app.Activity;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import androidx.localbroadcastmanager.content.LocalBroadcastManager;import androidx.viewpager.widget.ViewPager;import com.google.android.material.tabs.TabLayout;import com.jhm69.money_tracker.R;import com.jhm69.money_tracker.interfaces.IConstants;import com.jhm69.money_tracker.interfaces.IDateMode;import com.jhm69.money_tracker.interfaces.IUserActionsMode;import com.jhm69.money_tracker.ui.MainActivity;import com.jhm69.money_tracker.ui.MainFragment;import com.jhm69.money_tracker.ui.expenses.ExpensesContainerFragment;import com.jhm69.money_tracker.ui.expenses.ExpensesViewPagerAdapter;import com.jhm69.money_tracker.ui.expenses.NewExpenseFragment;import com.jhm69.money_tracker.utils.DateUtils;import com.jhm69.money_tracker.utils.DialogManager;import com.jhm69.money_tracker.utils.ExpensesManager;import com.jhm69.money_tracker.utils.IncomeManager;import com.jhm69.money_tracker.utils.Util;import java.util.Objects;import static com.jhm69.money_tracker.ui.MainActivity.TOTAL_TV;import static com.jhm69.money_tracker.ui.income.IncomeFragment.RQ_NEW_INCOME;public class IncomesContainerFragment extends MainFragment implements IncomeFragment.IIncomeContainerListener {    public static final int RQ_NEW_INCOME = 101;    private ViewPager vpExpensesContainer;    private IncomesViewPagerAdapter incomesViewPagerAdapter;    // Action mode for expenses.    private android.view.ActionMode mActionMode;    public static IncomesContainerFragment newInstance() {        IncomesContainerFragment fragment = new IncomesContainerFragment();        Bundle args = new Bundle();        fragment.setArguments(args);        return fragment;    }    public IncomesContainerFragment() {        // Required empty public constructor    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View rootView = inflater.inflate(R.layout.fragment_expenses_container, container, false);        vpExpensesContainer = (ViewPager)rootView.findViewById(R.id.vp_expenses);        return rootView;    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        mMainActivityListener.setTitle(getString(R.string.income));        mMainActivityListener.setMode(MainActivity.NAVIGATION_MODE_TABS);        mMainActivityListener.setFAB(R.drawable.ic_add_black_24dp, new View.OnClickListener() {            @Override            public void onClick(View v) {                onAddNewIncome();            }        });        incomesViewPagerAdapter = new IncomesViewPagerAdapter(getChildFragmentManager());        incomesViewPagerAdapter.addFrag(IncomeFragment.newInstance(IDateMode.MODE_TODAY), getString(R.string.today));        incomesViewPagerAdapter.addFrag(IncomeFragment.newInstance(IDateMode.MODE_WEEK), getString(R.string.week));        incomesViewPagerAdapter.addFrag(IncomeFragment.newInstance(IDateMode.MODE_MONTH), getString(R.string.month));        vpExpensesContainer.setAdapter(incomesViewPagerAdapter);        mMainActivityListener.setPager(vpExpensesContainer, new TabLayout.ViewPagerOnTabSelectedListener(vpExpensesContainer) {            @Override            public void onTabSelected(TabLayout.Tab tab) {                super.onTabSelected(tab);            }            @Override            public void onTabUnselected(TabLayout.Tab tab) {                super.onTabUnselected(tab);                endActionMode();            }        });    }    private void onAddNewIncome() {        NewIncome newIncome = NewIncome.newInstance(IUserActionsMode.MODE_CREATE, null);        newIncome.setTargetFragment(this, RQ_NEW_INCOME);        newIncome.show(getFragmentManager(), "NEW_EXPENSE");    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if(requestCode == RQ_NEW_INCOME && resultCode == Activity.RESULT_OK) {            updateIncomeFragments();        }    }    @Override    public void updateIncomeFragments(){        updateIncomeSummary();        LocalBroadcastManager.getInstance(Objects.requireNonNull(getActivity())).sendBroadcast(new Intent(IConstants.BROADCAST_UPDATE_EXPENSES));    }    private final android.view.ActionMode.Callback mActionModeCallback = new android.view.ActionMode.Callback() {        // Called when the action mode is created; startActionMode() was called        @Override        public boolean onCreateActionMode(android.view.ActionMode mode, Menu menu) {            // Inflate a menu resource providing context menu items            MenuInflater inflater = mode.getMenuInflater();            inflater.inflate(R.menu.expenses_context_menu, menu);            return true;        }        // Called each time the action mode is shown. Always called after onCreateActionMode, but        // may be called multiple times if the mode is invalidated.        @Override        public boolean onPrepareActionMode(android.view.ActionMode mode, Menu menu) {            return false; // Return false if nothing is done        }        // Called when the user selects a contextual menu item        @SuppressLint("NonConstantResourceId")        @Override        public boolean onActionItemClicked(android.view.ActionMode mode, MenuItem item) {            switch (item.getItemId()) {                case R.id.delete:                    eraseIncomes();                    return true;                default:                    return false;            }        }        // Called when the user exits the action mode        @Override        public void onDestroyActionMode(android.view.ActionMode mode) {            endActionMode();            mActionMode = null;        }    };    @Override    public boolean isActionMode() {        return mActionMode != null;    }    @Override    public void startActionMode() {        mActionMode = mMainActivityListener.setActionMode(mActionModeCallback);    }    @Override    public void endActionMode() {        if (mActionMode != null) {            mActionMode.finish();            ExpensesManager.getInstance().resetSelectedItems();            updateIncomeFragments();        }    }    @Override    public void setActionModeTitle(String title) {        mActionMode.setTitle(title);        mActionMode.invalidate();    }    @Override    public void onSaveInstanceState(Bundle outState) {        outState.putBoolean(IConstants.IS_ACTION_MODE_ACTIVATED, mActionMode != null);        super.onSaveInstanceState(outState);    }    @Override    public void onViewStateRestored(Bundle savedInstanceState) {        super.onViewStateRestored(savedInstanceState);        if (savedInstanceState != null) {            boolean isActionMode = savedInstanceState.getBoolean(IConstants.IS_ACTION_MODE_ACTIVATED);            if(isActionMode) {                mActionMode = mMainActivityListener.setActionMode(mActionModeCallback);                setActionModeTitle(String.valueOf(ExpensesManager.getInstance().getSelectedExpensesItems().size()));            }        }    }    private void eraseIncomes() {        DialogManager.getInstance().createCustomAcceptDialog(getActivity(), getString(R.string.delete), getString(R.string.confirm_delete_items), getString(R.string.confirm), getString(R.string.cancel), new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                if (which == DialogInterface.BUTTON_POSITIVE) {                    IncomeManager.getInstance().eraseSelectedIncomes();                    LocalBroadcastManager.getInstance(Objects.requireNonNull(getActivity())).sendBroadcast(new Intent(IConstants.BROADCAST_UPDATE_EXPENSES));                }                mActionMode.finish();                mActionMode = null;            }        });    }    private void updateIncomeSummary() {        if (vpExpensesContainer != null && incomesViewPagerAdapter != null) {            IncomeFragment incomeFragment = incomesViewPagerAdapter.getItem(vpExpensesContainer.getCurrentItem());            if (mMainActivityListener != null) {                float total = Income.getTotalIncomesByDateMode(incomeFragment.getCurrentDateMode());                TOTAL_TV.setText(Util.getFormattedCurrency(total));                String date;                switch (incomeFragment.getCurrentDateMode()) {                    case IDateMode.MODE_TODAY:                        date = Util.formatDateToString(DateUtils.getToday(), Util.getCurrentDateFormat());                        break;                    case IDateMode.MODE_WEEK:                        date = Util.formatDateToString(DateUtils.getFirstDateOfCurrentWeek(), Util.getCurrentDateFormat()).concat(" - ").concat(Util.formatDateToString(DateUtils.getRealLastDateOfCurrentWeek(), Util.getCurrentDateFormat()));                        break;                    case IDateMode.MODE_MONTH:                        date = Util.formatDateToString(DateUtils.getFirstDateOfCurrentMonth(), Util.getCurrentDateFormat()).concat(" - ").concat(Util.formatDateToString(DateUtils.getRealLastDateOfCurrentMonth(), Util.getCurrentDateFormat()));                        break;                    default:                        date = "";                        break;                }                TOTAL_TV.setText(date);            }        }    }}